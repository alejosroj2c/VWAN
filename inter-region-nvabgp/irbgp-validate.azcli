# Parameters 
rg=lab-vwan-nvabgp # set resource group
list_route_tables=true # set to true to list route tables, false to skip

#### Validate connectivity between VNETs and Branches

# 1) Test connectivity between VMs (they can be accessible via SSH over Public IP or Serial Console)

# List of VMs Public IP for SSH access
az network public-ip list -g $rg --query "[].{name:name,ip:ipAddress}" -o table 

# List of VMs Private IPs
for nicname in `az network nic list -g $rg --query [].name -o tsv`
do 
  echo -e $nicname private IP:
  az network nic show -g $rg --name $nicname --query "ipConfigurations[].privateIPAddress" --output tsv
  echo -e 
done

# For connectivity test you can also use curl or traceroute. For example from BranchVM1 or BranchVM2 run:
curl 10.2.1.4 # expected output spoke5VM
traceroute 10.2.1.4
ping 10.2.1.4 -O

# 2) Dump VMs route tables:
if [ "$list_route_tables" = true ]; then
  for nicname in `az network nic list -g $rg --query [].name -o tsv`
  do 
    echo -e $nicname effective routes:
    az network nic show-effective-route-table -g $rg --name $nicname --output table
    echo -e 
  done
fi

# 3) Dump all vHUBs route tables.
if [ "$list_route_tables" = true ]; then
  for vhubname in `az network vhub list -g $rg --query "[].id" -o tsv | rev | cut -d'/' -f1 | rev`
  do
    for routetable in `az network vhub route-table list --vhub-name $vhubname -g $rg --query "[].id" -o tsv`
    do
      if [ "$(echo $routetable | rev | cut -d'/' -f1 | rev)" != "noneRouteTable" ]; then
        echo -e vHUB: $vhubname 
        echo -e Effective route table: $(echo $routetable | rev | cut -d'/' -f1 | rev)   
        az network vhub get-effective-routes -g $rg -n $vhubname \
        --resource-type RouteTable \
        --resource-id $routetable \
        --query "value[].{addressPrefixes:addressPrefixes[0], asPath:asPath, nextHopType:nextHopType}" \
        --output table
        echo
      fi
    done
  done
fi

# Dump the Branches VPN Gateway routes:
vpngws=$(az network vnet-gateway list -g $rg --query [].name -o tsv) 
array=($vpngws)
for vpngw in "${array[@]}"
do 
  echo "*** $vpngw BGP peer status ***"
  az network vnet-gateway list-bgp-peer-status -g $rg -n $vpngw -o table
  echo "*** $vpngw BGP learned routes ***"
  az network vnet-gateway list-learned-routes -g $rg -n $vpngw -o table
  echo
done

# VPN Gateways advertised routes per BGP peer.
vpngws=$(az network vnet-gateway list -g $rg --query [].name -o tsv) 
array=($vpngws)
for vpngw in "${array[@]}"
do 
  ips=$(az network vnet-gateway list-bgp-peer-status -g $rg -n $vpngw --query 'value[].{ip:neighbor}' -o tsv)
  array2=($ips)
  for ip in "${array2[@]}"
  do
    echo *** $vpngw advertised routes to peer $ip ***
    az network vnet-gateway list-advertised-routes -g $rg -n $vpngw -o table --peer $ip
  done
  echo
done

# Review BGP configuration over Linux VMs:
# 1) Login spoke2-linux-nva1 and spoke4-linux-nva1
# 2) Elevate shell as root by running
sudo -s
# Review BGP config by running both commands:
vtysh 
show running-config
show ip bgp
show ip bgp summary
show ip bgp neighbors
show ip bgp neighbors 192.168.1.68 received-routes
show ip bgp neighbors 192.168.1.68 advertised-routes
show ip bgp neighbors 192.168.1.69 received-routes
show ip bgp neighbors 192.168.1.69 advertised-routes


# Dump ExpressRoute circuit effective routes
ers=$(az network express-route list -g $rg --query [].name -o tsv)
array=($ers)
for er in "${array[@]}"
 do 
 echo "*** $er BGP peer status ***"
 az network express-route list-route-tables --path primary -n $er -g $rg  --peering-name AzurePrivatePeering --query value -o table
 echo
done